<% title "Meet Netzke::Basepack::GridPanel" %>
<%= link_to_code %>

<p>Below is an instance of GridPanel, which by default provides for:</p>
<ul>
  <li>multiline CRUD-operations inside the grid itself</li>
  <li>multi-record editing and adding records via a form</li>
  <li>context menu</li>
  <li>support for Rails validations</li>
  <li>pagination</li>
  <li>sorting</li>
  <li>search filters (per column)</li>
  <li>extended search</li>
  <li>automatic column type detection (e.g. "salary" is a number column)</li>
  <li>(WIP)persistent on-the-fly configuration of the columns ("move", "resize" and "hide"-operations)</li>
</ul>

<p>Code (in the view):</p>
<% coderay do %>
netzke :bosses,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss'
<% end %>

<p>Result:</p>
<%= netzke :bosses,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss' %>

<h2>Control over columns</h2>
<p>If you need more control over which columns to display and how, you can provide <tt>:columns</tt> option:</p>
<% coderay do %>
netzke :bosses_custom_columns,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss',
  :title => "Bosses",
  :width => 400,
  :columns => [
    :last_name,
    {:name => :salary, :read_only => true, :label => "$", :renderer => 'usMoney'},
    {:name => :email, :width => 180}]
<% end %>
<p>Result:</p>
<%= netzke :bosses_custom_columns,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss',
  :title => "Bosses",
  :width => 400,
  :columns => [
    :last_name,
    {:name => :salary, :read_only => true, :label => "$", :renderer => 'usMoney'},
    {:name => :email, :width => 180}] %>

<h2>Associations, Rails validations, "virtual" columns, and more</h2>
<p>Here's an example that demonstrates:
  <li>how GridPanel handles one-to-many associations</li>
  <li>usage of "virtual" attributes (model's instance methods)</li>
  <li>usage of the <tt>getter</tt> column configuration option</li>
  <li>usage of the <tt>scope</tt> column configuration option (for filtering combobox options)</li>
  <li>Rails' validations in action</li>

<% coderay do %>
# Model
class Clerk < ActiveRecord::Base
  belongs_to :boss

  validates_presence_of :first_name
  validates_presence_of :last_name

  # a virtual attribute
  def name
    "#{last_name}, #{first_name}"
  end

  def updated
    updated_at > 5.minutes.ago
  end
end

# Extend GridPanel to be specific about the model and columns we want to display
class ClerkGrid < Netzke::Basepack::GridPanel
  css_include :main

  def configuration
    super.merge({
      :model => "Clerk",

      # Declaring columns
      :columns => [
        {
          :name => :name,
          :renderer => "uppercase",
          :width => 200
        },
        :first_name,
        :last_name,
        {
          :name => :updated_bulb,
          :width => 40,
          :label => "<div class='bulb-off' />",
          :tooltip => "Recently updated",
          :getter => lambda { |r|
            bulb = r.updated ? "on" : "off"
            "<div class='bulb-#{bulb}' />"
          }
        },
        :email,
        {
          :name => :boss__last_name,
          :scope => {:salary.gt => 95000},
          :header => "Boss"
        }
      ]
    })
  end
end

# In the view:
netzke :clerk_grid
<% end %>
<p>Result:</p>
<%= netzke :clerk_grid %>

<h2>Permissions</h2>
You can specify which actions are allowed for this grid
<% coderay do %>
netzke :bosses_with_permissions,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss',
  :prohibit_update => true,
  :prohibit_delete => true
<% end %>
<p>Result:</p>
<%= netzke :bosses_with_permissions,
  :class_name => "Netzke::Basepack::GridPanel",
  :model => 'Boss',
  :prohibit_update => true,
  :prohibit_delete => true
%>
<p class="small">A word about the security: it's not only about disabling buttons. Even if the user manages to submit a prohibited operation, the server side of the widget will block the attempt.
</p>

<h2>Configuring the bars</h2>
<p>You can easily customize the bottom bar, or even move the actions to the top bar.</p>

<% coderay do %>
netzke :clerks_with_custom_bottom_bar,
    :class_name => "Netzke::Basepack::GridPanel",
    :model => 'Clerk',
    :bbar => nil,
    :tbar => [{
      :menu => [:add.action, :edit.action, :apply.action, :del.action],
      :text => "Edit inline",
      :icon =>"/images/icons/table.png"
    },{
      :menu => [:add_in_form.action, :edit_in_form.action],
      :text => "Edit in form",
      :icon => "/images/icons/application_form.png"
    }]
<% end %>

<p>Result:</p>
<%= netzke :clerks_with_custom_bottom_bar,
    :class_name => "Netzke::Basepack::GridPanel",
    :model => 'Clerk',
    :bbar => nil,
    :tbar => [{
      :menu => [:add.action, :edit.action, :apply.action, :del.action],
      :text => "Edit inline",
      :icon =>"/images/icons/table.png"
    },{
      :menu => [:add_in_form.action, :edit_in_form.action],
      :text => "Edit in form",
      :icon => "/images/icons/application_form.png"
    }]
%>

<h2>Get the code</h2>
<p>Netzke framework consists of 2 Rails plugins/Ruby gems: netzke-core and netzke-basepack. Get them on the GitHub along with the source code for this demo: <a href = http://github.com/skozlov>http://github.com/skozlov</a></p>
<p>The news about Netzke development and more tutorials on <a href = http://blog.writelesscode.com>http://blog.writelesscode.com</a>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="small">--- The following links alter test data (the page will be reloaded):</p>
<p class="small"><%= link_to "regenerate test data", :action => "regenerate_test_data" %></p>
<p class="small"><%= link_to "reset configs (e.g. columns configurations, permissions, etc )", :action => "reset_configs" %></p>
